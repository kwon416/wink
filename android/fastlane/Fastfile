# frozen_string_literal: true

default_platform(:android)

platform :android do
  def increment_version_code
    path = '../app/build.gradle'
    re = /versionCode\s+(\d+)/

    s = File.read(path)
    versionCode = s[re, 1].to_i
    s[re, 1] = (versionCode + 1).to_s

    f = File.new(path, 'w')
    f.write(s)
    f.close
  end
  def increment_version_number(bump_type: nil, version_number: nil)
    path = '../app/build.gradle'
    re = /versionName\s+("\d+.\d+.\d+")/
    s = File.read(path)
    versionName = s[re, 1].gsub!('"', '').split('.')

    major = versionName[0].to_i
    minor = versionName[1].to_i
    patch = versionName[2].to_i

    if bump_type == 'major'
      major += 1
      minor = 0
      patch = 0
    elsif bump_type == 'minor'
      minor += 1
      patch = 0
    elsif bump_type == 'patch'
      patch += 1
    end

    s[re, 1] = if version_number
                 "\"#{version_number}\""
               else
                 "\"#{major}.#{minor}.#{patch}\""
               end

    f = File.new(path, 'w')
    f.write(s)
    f.close
    increment_version_code
  end

  def updateVersion(options)
    version = options[:version] || prompt(text: "Enter the version type or specific version\n(major, minor, patch or 1.0.0): ")

    re = /\d+.\d+.\d+/
    versionNum = version[re, 0]

    if versionNum
      increment_version_number(
        version_number: versionNum
      )
    elsif %w[major minor patch].include?(version)
      increment_version_number(
        bump_type: version
      )
    else
      UI.user_error!('[ERROR] Wrong version!!!!!!')
    end
  end

  # Flutter build appbundle
  lane :flutter_build_appbundle do
    sh("cd", "..")
    sh("flutter", "clean")
    sh("flutter", "build", "appbundle")
  end

  desc 'Update version'
  lane :version do |options|
    updateVersion(options)
  end

  # Add badge to app icon
  private_lane :add_badge_to_icon do
    if ENV["ENV"] == "STAGING"
        add_badge(alpha: true)
    end
  end

  desc "Increase version code from pubspec.yaml"
  lane :increse_version_code_in_pubspec do
    yaml_file_path = "../../pubspec.yaml"
    data = YAML.load_file(yaml_file_path)
    version = data["version"]
    puts "current version : #{version}"
    version_number = data["version"].split("+")[0]
    new_version_code = data["version"].split("+")[1].to_i + 1
    new_version = "#{version_number}+#{new_version_code}"
    puts "new version : #{new_version}"
    data["version"] = new_version
    File.open(yaml_file_path, 'w') { |f| YAML.dump(data, f)}
  end


  desc 'Submit a new Beta'
  lane :beta do
    # 버전 코드 증가 (gradle에서)
#     increment_version_code
    # 버전코드 증가 (yaml에서)
    increse_version_code_in_pubspec
    # 환경 별 빌드
    flutter_build_appbundle

    # Add badge to app icon (only testbed)
    add_badge_to_icon

    upload_to_play_store(
      skip_upload_metadata: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      track: 'internal', # 내부 테스트
      aab: '../build/app/outputs/bundle/release/app-release.aab'
    )
  end

  desc 'Deploy a new version to the Google Play'
  lane :release do |_options|
    gradle(task: 'clean bundleRelease')
    upload_to_play_store(
      skip_upload_metadata: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      aab: '../build/app/outputs/bundle/release/app-release.aab'
    )
  end
end